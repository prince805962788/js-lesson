// 给定一个非空整数数组， 除了某个元素只出现一次以外， 其余每个元素均出现两次。 找出那个只出现了一次的元素。

// 说明：

// 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

// 示例 1:

//   输入: [2, 2, 1]
// 输出: 1
// 示例 2:

//   输入: [4, 1, 2, 1, 2]
// 输出: 4

//题解~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 异或的规律

// 任何数和本身异或则为0

// 任何数和 0 异或是本身

// 异或运算满足交换律， 即：
// a ^ b ^ c = a ^ c ^ b
// n ^ n === 0 且 n ^ 0 === n
// 并且， 异或遵循交换律
//   [4, 1, 2, 1, 2] 将数字全部异或运算一遍：
// 4 ^ 1 ^ 2 ^ 1 ^ 2 => 1 ^ 1 ^ 2 ^ 2 ^ 4 => 0 ^ 2 ^ 2 ^ 4 => 2 ^ 2 ^ 4 => 0 ^ 4 => 4
// 出现 2 次的数字在异或中都抵消了， 最后得出只出现 1 次的数
const singleNumber = function (nums) {
  const res = nums.reduce((prev, cur) => {
    return prev ^ cur
  })
  return res
};
console.log(singleNumber([4, 1, 2, 1, 2]))